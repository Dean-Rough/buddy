generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Parent {
  id            String   @id @default(cuid())
  clerkUserId   String   @unique @map("clerk_user_id")
  email         String   @unique
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  
  // New auth fields
  dashboardPinHash     String?  @map("dashboard_pin_hash")
  onboardingComplete   Boolean  @default(false) @map("onboarding_complete")
  
  // Notification preferences
  emailNotifications Boolean @default(true) @map("email_notifications")
  smsNotifications   Boolean @default(false) @map("sms_notifications")
  pushNotifications  Boolean @default(true) @map("push_notifications")
  
  // Privacy settings
  dataRetentionDays     Int     @default(90) @map("data_retention_days")
  termsAcceptedAt       DateTime? @map("terms_accepted_at")
  privacyPolicyVersion  String? @map("privacy_policy_version")
  
  // Relations - unified to use only new models
  childAccounts ChildAccount[]
  notifications ParentNotification[]
  
  @@map("parents")
}

// Unified Clerk-based child accounts (renamed from ChildAccount)
model ChildAccount {
  id                String   @id @default(cuid())
  clerkUserId       String   @unique @map("clerk_user_id")
  parentClerkUserId String   @map("parent_clerk_user_id")
  username          String   @unique
  name              String
  age               Int
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")
  
  // Personalization
  persona         String  @default("friendly-raccoon")
  languageLevel   String  @default("foundation") @map("language_level")
  preferredName   String? @map("preferred_name")
  
  // Privacy controls
  visibilityLevel String @default("highlights") @map("visibility_level")
  accountStatus   String @default("active") @map("account_status")
  
  // Relations
  parent        Parent @relation(fields: [parentClerkUserId], references: [clerkUserId], onDelete: Cascade)
  conversations         Conversation[]
  safetyEvents          SafetyEvent[]
  memories              ChildMemory[]
  notifications         ParentNotification[]
  knowledgeUsage        KnowledgeUsage[]
  conversationContexts  ConversationContext[]
  dailyUsage            DailyUsage[]
  weeklySummaries       WeeklySummary[]
  
  @@index([parentClerkUserId])
  @@index([username])
  @@index([accountStatus])
  @@map("child_accounts")
}

// Unified conversations (renamed from NewConversation)
model Conversation {
  id              String   @id @default(cuid())
  childAccountId  String   @map("child_account_id")
  startedAt       DateTime @default(now()) @map("started_at")
  endedAt         DateTime? @map("ended_at")
  lastActivity    DateTime @default(now()) @map("last_activity")
  
  // Session metadata
  messageCount     Int @default(0) @map("message_count")
  durationSeconds  Int @default(0) @map("duration_seconds")
  
  // Emotional tracking
  mood            String? 
  moodConfidence  Decimal? @map("mood_confidence") @db.Decimal(3,2)
  emotionalTrend  String? @map("emotional_trend")
  
  // Content classification
  topics      String[]
  safetyLevel Int @default(0) @map("safety_level")
  
  // Parent visibility
  parentSummary   String? @map("parent_summary") @db.Text
  escalationLevel Int     @default(0) @map("escalation_level")
  
  // Relations
  childAccount ChildAccount @relation(fields: [childAccountId], references: [id], onDelete: Cascade)
  messages     Message[]
  safetyEvents SafetyEvent[]
  
  @@index([childAccountId, startedAt(sort: Desc)])
  @@index([safetyLevel, startedAt(sort: Desc)])
  @@map("new_conversations")
}

// Unified messages (renamed from NewMessage)
model Message {
  id              String   @id @default(cuid())
  conversationId  String   @map("conversation_id")
  content         String   @db.Text
  role            String   // 'child' | 'assistant'
  messageType     String   @default("text") @map("message_type")
  createdAt       DateTime @default(now()) @map("created_at")
  
  // AI processing metadata
  aiModel         String? @map("ai_model")
  processingTimeMs Int?   @map("processing_time_ms")
  
  // Safety analysis
  safetyScore    Decimal? @map("safety_score") @db.Decimal(3,2)
  safetyFlags    String[] @map("safety_flags")
  humanReviewed  Boolean  @default(false) @map("human_reviewed")
  
  // Voice/audio metadata
  audioUrl       String? @map("audio_url")
  audioDurationMs Int?   @map("audio_duration_ms")
  
  // Relations
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  safetyEvents SafetyEvent[]
  
  @@index([conversationId, createdAt])
  @@index([humanReviewed, safetyScore(sort: Desc)])
  @@map("new_messages")
}

// Unified safety events (renamed from NewSafetyEvent)
model SafetyEvent {
  id             String   @id @default(cuid())
  eventType      String   @map("event_type")
  severityLevel  Int      @map("severity_level")
  childAccountId String   @map("child_account_id")
  conversationId String?  @map("conversation_id")
  messageId      String?  @map("message_id")
  
  // Event details
  triggerContent   String   @map("trigger_content") @db.Text
  aiReasoning      String?  @map("ai_reasoning") @db.Text
  contextSummary   String?  @map("context_summary") @db.Text
  
  // Timestamps
  detectedAt       DateTime  @default(now()) @map("detected_at")
  parentNotifiedAt DateTime? @map("parent_notified_at")
  resolvedAt       DateTime? @map("resolved_at")
  
  // Human moderation
  moderatorId       String? @map("moderator_id")
  moderatorDecision String? @map("moderator_decision")
  moderatorNotes    String? @map("moderator_notes") @db.Text
  
  // Status tracking
  status String @default("active")
  
  // Relations
  childAccount  ChildAccount @relation(fields: [childAccountId], references: [id])
  conversation  Conversation? @relation(fields: [conversationId], references: [id])
  message       Message? @relation(fields: [messageId], references: [id])
  moderator     Moderator? @relation(fields: [moderatorId], references: [id])
  notifications ParentNotification[]
  
  @@index([childAccountId, detectedAt(sort: Desc)])
  @@index([severityLevel, status, detectedAt])
  @@index([childAccountId, parentNotifiedAt(sort: Desc)])
  @@map("new_safety_events")
}

// Unified parent notifications (renamed from NewParentNotification)
model ParentNotification {
  id               String   @id @default(cuid())
  parentClerkUserId String  @map("parent_clerk_user_id")
  childAccountId   String   @map("child_account_id")
  notificationType String   @map("notification_type")
  subject          String
  content          String   @db.Text
  
  // Delivery info
  deliveryMethod String    @map("delivery_method")
  sentAt         DateTime  @default(now()) @map("sent_at")
  deliveredAt    DateTime? @map("delivered_at")
  readAt         DateTime? @map("read_at")
  
  // Related entities
  safetyEventId  String? @map("safety_event_id")
  conversationId String? @map("conversation_id")
  
  // Status
  status String @default("sent")
  
  // Relations
  parent       Parent @relation(fields: [parentClerkUserId], references: [clerkUserId], onDelete: Cascade)
  childAccount ChildAccount @relation(fields: [childAccountId], references: [id], onDelete: Cascade)
  safetyEvent  SafetyEvent? @relation(fields: [safetyEventId], references: [id])
  
  @@index([parentClerkUserId, sentAt(sort: Desc)])
  @@index([status, sentAt])
  @@map("new_parent_notifications")
}

model Moderator {
  id                    String   @id @default(cuid())
  email                 String   @unique
  name                  String
  role                  String   @default("moderator")
  active                Boolean  @default(true)
  
  // Certification tracking
  certifiedAt           DateTime? @map("certified_at")
  certificationExpiresAt DateTime? @map("certification_expires_at")
  trainingCompleted     Json?     @map("training_completed")
  
  // Activity tracking
  createdAt             DateTime @default(now()) @map("created_at")
  lastLogin             DateTime? @map("last_login")
  
  // Performance metrics
  reviewsCompleted       Int     @default(0) @map("reviews_completed")
  accuracyScore          Decimal @default(1.00) @map("accuracy_score") @db.Decimal(3,2)
  avgResponseTimeMinutes Int?    @map("average_response_time_minutes")
  
  // Relations
  safetyEvents SafetyEvent[]
  
  @@map("moderators")
}

// Unified child memory (renamed from NewChildMemory)
model ChildMemory {
  id                   String   @id @default(cuid())
  childAccountId       String   @map("child_account_id")
  memoryType           String   @map("memory_type")
  key                  String
  value                String   @db.Text
  confidence           Decimal  @default(1.00) @db.Decimal(3,2)
  lastReferenced       DateTime @default(now()) @map("last_referenced")
  createdAt            DateTime @default(now()) @map("created_at")
  
  // Source tracking
  sourceConversationId String? @map("source_conversation_id")
  sourceMessageId      String? @map("source_message_id")
  aiReasoning          String? @map("ai_reasoning") @db.Text
  
  // Relations
  childAccount ChildAccount @relation(fields: [childAccountId], references: [id], onDelete: Cascade)
  
  @@unique([childAccountId, memoryType, key])
  @@index([childAccountId, lastReferenced(sort: Desc)])
  @@index([memoryType, lastReferenced(sort: Desc)])
  @@map("new_child_memory")
}

// ========================================
// KNOWLEDGE SYSTEM MODELS
// ========================================

// Core knowledge entries with vector embeddings
model KnowledgeEntry {
  id            String   @id @default(cuid())
  term          String   // The term or concept
  definition    String   @db.Text // Human-readable definition
  category      String   // 'gaming', 'slang', 'youtuber', 'general'
  subcategory   String?  // 'minecraft', 'uk_specific', etc.
  examples      String[] // Usage examples
  ageRelevance  Int[]    // [7, 8, 9, 10, 11, 12] - applicable ages
  ukSpecific    Boolean  @default(false) @map("uk_specific")
  
  // Quality and sourcing
  confidence    String   // 'verified', 'crowdsourced', 'ai_generated'
  source        String?  // Where this knowledge came from
  sourceUrl     String?  @map("source_url")
  verifiedBy    String?  @map("verified_by") // Moderator or system
  verifiedAt    DateTime? @map("verified_at")
  
  // Vector search
  embedding     Float[]  // OpenAI embedding for semantic search
  
  // Metadata
  trend         String?  // 'rising', 'peak', 'fading', 'stable'
  popularity    Int      @default(0) // Usage frequency
  lastUpdated   DateTime @updatedAt @map("last_updated")
  createdAt     DateTime @default(now()) @map("created_at")
  
  // Relations
  usageHistory  KnowledgeUsage[]
  
  @@unique([term, category])
  @@index([term])
  @@index([category, subcategory])
  @@index([trend, popularity(sort: Desc)])
  @@index([ukSpecific, ageRelevance])
  @@map("knowledge_entries")
}

// Track trending topics in real-time
model TrendingTopic {
  id              String   @id @default(cuid())
  term            String
  category        String   // 'game', 'youtuber', 'meme', 'slang', 'trend'
  weeklyMentions  Int      @default(1) @map("weekly_mentions")
  momentum        String   // 'rising', 'peak', 'fading', 'dead'
  ageGroups       Int[]    @map("age_groups") // Which age groups use this
  
  // Geographic
  region          String   @default("UK") // 'UK', 'US', 'global'
  
  // Timing
  firstSeen       DateTime @default(now()) @map("first_seen")
  lastSeen        DateTime @default(now()) @map("last_seen")
  peakDate        DateTime? @map("peak_date")
  createdAt       DateTime @default(now()) @map("created_at")
  
  // Context
  relatedTerms    String[] @map("related_terms")
  sentiment       String   @default("neutral") // 'positive', 'negative', 'neutral'
  platform        String[] // ['tiktok', 'youtube', 'roblox', 'minecraft']
  
  @@unique([term, category, createdAt])
  @@index([momentum, weeklyMentions(sort: Desc)])
  @@index([category, lastSeen(sort: Desc)])
  @@index([ageGroups, region])
  @@map("trending_topics")
}

// Track how knowledge is actually used in conversations
model KnowledgeUsage {
  id                String   @id @default(cuid())
  knowledgeEntryId  String   @map("knowledge_entry_id")
  childAccountId    String   @map("child_account_id")
  conversationId    String   @map("conversation_id")
  
  // Usage context
  queryTerm         String   @map("query_term") // What the child actually asked
  confidence        Decimal  @default(0.0) @db.Decimal(3,2) // How confident the match was
  helpful           Boolean? // Was this knowledge helpful? (feedback)
  childAge          Int      @map("child_age")
  
  // Conversation context
  messageContext    String?  @map("message_context") @db.Text // Surrounding conversation
  aiResponse        String?  @map("ai_response") @db.Text // How AI used this knowledge
  
  // Analytics
  usedAt            DateTime @default(now()) @map("used_at")
  responseTime      Int?     @map("response_time") // MS to retrieve knowledge
  
  // Relations
  knowledgeEntry    KnowledgeEntry @relation(fields: [knowledgeEntryId], references: [id], onDelete: Cascade)
  childAccount      ChildAccount @relation(fields: [childAccountId], references: [id], onDelete: Cascade)
  
  @@index([knowledgeEntryId, usedAt(sort: Desc)])
  @@index([childAccountId, usedAt(sort: Desc)])
  @@index([queryTerm, confidence(sort: Desc)])
  @@index([childAge, usedAt(sort: Desc)])
  @@map("knowledge_usage")
}

// Conversation context and memory
model ConversationContext {
  id               String   @id @default(cuid())
  conversationId   String   @map("conversation_id")
  childAccountId   String   @map("child_account_id")
  
  // Context tracking
  topics           String[] // Current conversation topics
  mood             String?  // Detected child mood
  interests        String[] // Child's interests mentioned
  unknownTerms     String[] @map("unknown_terms") // Terms child used that we don't know
  
  // Knowledge state
  knowledgeUsed    String[] @map("knowledge_used") // Knowledge IDs used in this conversation
  trendingContext  String[] @map("trending_context") // Trending topics mentioned
  
  // Session info
  startedAt        DateTime @default(now()) @map("started_at")
  lastUpdated      DateTime @updatedAt @map("last_updated")
  messageCount     Int      @default(0) @map("message_count")
  
  // Quality metrics
  engagementScore  Decimal? @default(0.0) @map("engagement_score") @db.Decimal(3,2)
  knowledgeScore   Decimal? @default(0.0) @map("knowledge_score") @db.Decimal(3,2)
  
  // Relations
  childAccount     ChildAccount @relation(fields: [childAccountId], references: [id], onDelete: Cascade)
  
  @@unique([conversationId])
  @@index([childAccountId, lastUpdated(sort: Desc)])
  @@index([topics, lastUpdated(sort: Desc)])
  @@index([mood, startedAt(sort: Desc)])
  @@map("conversation_contexts")
}

// Cache frequently accessed knowledge for performance
model KnowledgeCache {
  id            String   @id @default(cuid())
  cacheKey      String   @unique @map("cache_key") // Query hash
  childAge      Int      @map("child_age")
  query         String   @db.Text
  
  // Cached results
  knowledgeData Json     @map("knowledge_data") // Serialized knowledge response
  confidence    Decimal  @db.Decimal(3,2)
  
  // Cache management
  hitCount      Int      @default(0) @map("hit_count")
  createdAt     DateTime @default(now()) @map("created_at")
  lastHit       DateTime @default(now()) @map("last_hit")
  expiresAt     DateTime @map("expires_at")
  
  @@index([childAge, lastHit(sort: Desc)])
  @@index([expiresAt])
  @@index([hitCount(sort: Desc), lastHit(sort: Desc)])
  @@map("knowledge_cache")
}

// ========================================
// PARENT DASHBOARD SYSTEM
// ========================================

// PIN access control for parent dashboard
model ParentDashboardAccess {
  id                  String   @id @default(cuid())
  parentClerkUserId   String   @unique @map("parent_clerk_user_id")
  pinHash             String   @map("pin_hash")
  
  // Security tracking
  failedAttempts      Int      @default(0) @map("failed_attempts")
  lockedUntil         DateTime? @map("locked_until")
  lastSuccessfulAccess DateTime? @map("last_successful_access")
  
  // PIN management
  pinCreatedAt        DateTime @default(now()) @map("pin_created_at")
  pinChangedAt        DateTime? @map("pin_changed_at")
  resetRequested      Boolean  @default(false) @map("reset_requested")
  resetToken          String?  @unique @map("reset_token")
  resetTokenExpires   DateTime? @map("reset_token_expires")
  
  // Metadata
  createdAt           DateTime @default(now()) @map("created_at")
  updatedAt           DateTime @updatedAt @map("updated_at")
  
  @@map("parent_dashboard_access")
}

// Parent settings and preferences
model ParentSettings {
  id                    String   @id @default(cuid())
  parentClerkUserId     String   @unique @map("parent_clerk_user_id")
  
  // Time management
  dailyTimeLimitMinutes Int?     @map("daily_time_limit_minutes")
  weeklyTimeLimitMinutes Int?    @map("weekly_time_limit_minutes")
  timeWarningMinutes    Int      @default(10) @map("time_warning_minutes")
  timeEndBehavior       String   @default("gradual") @map("time_end_behavior") // 'hard_stop', 'gradual', 'warning_only'
  
  // Active hours
  allowedStartHour      Int?     @map("allowed_start_hour") // 24hr format
  allowedEndHour        Int?     @map("allowed_end_hour")
  restrictWeekends      Boolean  @default(false) @map("restrict_weekends")
  
  // Email summaries
  emailSummaryEnabled   Boolean  @default(true) @map("email_summary_enabled")
  emailSummaryFrequency String   @default("weekly") @map("email_summary_frequency") // 'daily', 'weekly', 'monthly'
  summaryEmail          String?  @map("summary_email")
  lastEmailSummary      DateTime? @map("last_email_summary")
  
  // Emergency alerts
  emergencyAlertsEnabled Boolean @default(true) @map("emergency_alerts_enabled")
  emergencyEmail         String? @map("emergency_email")
  emergencyPhone         String? @map("emergency_phone")
  
  // Privacy controls
  dataRetentionDays     Int      @default(90) @map("data_retention_days")
  shareUsageAnalytics   Boolean  @default(true) @map("share_usage_analytics")
  allowDataExport       Boolean  @default(true) @map("allow_data_export")
  
  // Content controls
  allowedTopics         String[] @map("allowed_topics")
  blockedTopics         String[] @map("blocked_topics")
  safetyLevel           String   @default("standard") @map("safety_level") // 'strict', 'standard', 'relaxed'
  
  // Metadata
  createdAt             DateTime @default(now()) @map("created_at")
  updatedAt             DateTime @updatedAt @map("updated_at")
  
  @@map("parent_settings")
}

// Daily usage tracking
model DailyUsage {
  id                  String   @id @default(cuid())
  parentClerkUserId   String   @map("parent_clerk_user_id")
  childAccountId      String   @map("child_account_id")
  date                DateTime @db.Date
  
  // Time tracking
  totalMinutes        Int      @default(0) @map("total_minutes")
  sessionCount        Int      @default(0) @map("session_count")
  longestSessionMinutes Int    @default(0) @map("longest_session_minutes")
  
  // Activity summary
  messagesSent        Int      @default(0) @map("messages_sent")
  topicsDiscussed     String[] @map("topics_discussed")
  moodSummary         String?  @map("mood_summary")
  
  // Safety metrics
  safetyEvents        Int      @default(0) @map("safety_events")
  escalationEvents    Int      @default(0) @map("escalation_events")
  
  // Usage quality
  engagementScore     Decimal? @default(0.0) @map("engagement_score") @db.Decimal(3,2)
  learningOpportunities Int    @default(0) @map("learning_opportunities")
  
  // Metadata
  createdAt           DateTime @default(now()) @map("created_at")
  updatedAt           DateTime @updatedAt @map("updated_at")
  
  // Relations
  childAccount        ChildAccount @relation(fields: [childAccountId], references: [id], onDelete: Cascade)
  
  @@unique([childAccountId, date])
  @@index([parentClerkUserId, date(sort: Desc)])
  @@index([childAccountId, date(sort: Desc)])
  @@map("daily_usage")
}

// ========================================
// EMAIL SUMMARY SYSTEM
// ========================================

// Weekly email summaries for parents
model WeeklySummary {
  id                  String   @id @default(cuid())
  parentClerkUserId   String   @map("parent_clerk_user_id")
  childAccountId      String   @map("child_account_id")
  
  // Time period
  weekStart           DateTime @db.Date @map("week_start")
  weekEnd             DateTime @db.Date @map("week_end")
  
  // Usage statistics
  totalChatTime       Int      @map("total_chat_time") // minutes
  sessionCount        Int      @map("session_count")
  averageSessionTime  Int      @map("average_session_time") // minutes
  
  // LLM Analysis data (stored as JSON)
  analysisData        Json     @map("analysis_data")
  
  // Email delivery tracking
  emailSent           Boolean  @default(false) @map("email_sent")
  emailSentAt         DateTime? @map("email_sent_at")
  emailSubject        String?  @map("email_subject")
  emailContent        String?  @map("email_content") @db.Text
  
  // Generation metadata
  generatedAt         DateTime @default(now()) @map("generated_at")
  generationModel     String   @default("gpt-4o-mini") @map("generation_model")
  tokenCost           Int?     @map("token_cost") // Total tokens used
  
  // Error handling
  generationErrors    String[] @map("generation_errors")
  retryCount          Int      @default(0) @map("retry_count")
  
  // Relations
  childAccount        ChildAccount @relation(fields: [childAccountId], references: [id], onDelete: Cascade)
  
  @@unique([parentClerkUserId, childAccountId, weekStart])
  @@index([parentClerkUserId, weekStart(sort: Desc)])
  @@index([childAccountId, weekStart(sort: Desc)])
  @@index([emailSent, weekStart])
  @@map("weekly_summaries")
}